package leasecity.dto.user;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import leasecity.dto.adminwork.Question;
import leasecity.dto.adminwork.WorkLog;
import leasecity.dto.community.Comment;
import leasecity.dto.community.Reply;
import leasecity.util.DateUtil;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;

/**
 * 회원 모델 클래스.
 * 
 * @author generated by ERMaster
 * @version $Id$
 */

@Data
@AllArgsConstructor
@EqualsAndHashCode
public class User implements Serializable {

	/** serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** 아이디. */
	private String userId;

	/** 비밀번호. */
	private String password;

	/** 업체명. */
	private String companyName;

	/** 대표자명. */
	private String representName;

	/** 대표자 연락처. */
	private String representPhone;

	/** 휴대폰 연락처. */
	private String handPhone;

	/** 이메일 주소. */
	private String email;

	/** 주소. */
	private String address;

	/** 알림여부. */
	private String notifyOnOff;

	/** 보유 사이트 / URL. */
	private String url;

	/** 회원가입 날짜. */
	private Date regDate;

	/** 평가점수. */
	private Double evaluation;
	
	/** 회원탈퇴 날짜. */
	private Date withdrawDate;

	/** 커뮤니티 게시글 목록. */
	private List<Comment> commentsList;

	/** 건설업체 목록. */
	private List<ConstructionCompany> constructionCompanyList;

	/** 중기업체 목록. */
	private List<HeavyEquipmentCompany> heavyEquipmentCompanyList;

	/** 질문 목록. */
	private List<Question> questionsList;

	/** 커뮤니티 댓글 목록. */
	private List<Reply> replysList;

	/** 작업 내역 목록. */
	private List<WorkLog> workLogList;

	/**
	 * 생성자.
	 */
	public User() {
		this.commentsList = new ArrayList<Comment>();
		this.constructionCompanyList = new ArrayList<ConstructionCompany>();
		this.heavyEquipmentCompanyList = new ArrayList<HeavyEquipmentCompany>();
		this.questionsList = new ArrayList<Question>();
		this.replysList = new ArrayList<Reply>();
		this.workLogList = new ArrayList<WorkLog>();
	}

	/**
	 * 파라미터를 이용한 생성자.
	 */
	public User(
			String userId, String password, 
			String companyName, String representName,
			String representPhone, String handPhone,
			String email, String address,
			String notifyOnOff, String url,
			Date regDate, Double evaluation,
			Date withdrawDate){	
		this.userId = userId;
		this.password = password;
		this.companyName = companyName;
		this.representName = representName;
		this.representPhone = representPhone;
		this.handPhone = handPhone;
		this.email = email;
		this.address = address;
		this.notifyOnOff = notifyOnOff;
		this.url = url;
		this.regDate = regDate;
		this.evaluation = evaluation;
		this.withdrawDate = withdrawDate;
		
		this.commentsList = new ArrayList<Comment>();
		this.constructionCompanyList = new ArrayList<ConstructionCompany>();
		this.heavyEquipmentCompanyList = new ArrayList<HeavyEquipmentCompany>();
		this.questionsList = new ArrayList<Question>();
		this.replysList = new ArrayList<Reply>();
		this.workLogList = new ArrayList<WorkLog>();
		
	}
	
	//다른 User 를 이용한 생성자
	public User(User user){
		this.userId = user.userId;
		this.password = user.password;
		this.companyName = user.companyName;
		this.representName = user.representName;
		this.representPhone = user.representPhone;
		this.handPhone = user.handPhone;
		this.email = user.email;
		this.address = user.address;
		this.notifyOnOff = user.notifyOnOff;
		this.url = user.url;
		this.regDate = user.regDate;
		this.evaluation = user.evaluation;
		this.withdrawDate = user.withdrawDate;
		
		this.commentsList = new ArrayList<Comment>();
		this.constructionCompanyList = new ArrayList<ConstructionCompany>();
		this.heavyEquipmentCompanyList = new ArrayList<HeavyEquipmentCompany>();
		this.questionsList = new ArrayList<Question>();
		this.replysList = new ArrayList<Reply>();
		this.workLogList = new ArrayList<WorkLog>();
	}
	
	public String userInfo(){
		
		StringBuffer sb = new StringBuffer()
		.append(this.getClass().getSimpleName() + " : (")
				.append("userId="+userId)
				.append(", password="+password)
				.append(", companyName="+companyName)
				.append(", representName="+representName)
				.append(", representPhone="+representPhone)
				.append(", handPhone="+handPhone)
				.append(", email="+email)
				.append(", address="+address)
				.append(", notifyOnOff="+notifyOnOff)
				.append(", url="+url)
				.append(", regDate="+DateUtil.getDateString(regDate))
				.append(", evaluation="+evaluation)
				.append(", withdrawDate="+DateUtil.getDateString(withdrawDate));
				
		
		
		return sb.toString();
	}
}
